---
title: "Introduction aux bases de donn√©es relationnelles"
subtitle: "Master Hydrosyst√®mes et Bassins Versants"
author: "Louis Mani√®re"
institute: "Universit√© de Tours"
date: last-modified
license: "code : MIT License, presentation : CC BY-NC"
lang: "fr"
format: 
  revealjs:
    transition: slide
    background-transition: fade
    navigation-mode: vertical
    theme: custom.scss
    logo: "./img/universite-tours-logo.png"
    footer: "Master 2 Hydrosyst√®mes et Bassins Versants 2024-2025"
    css: custom.css
    slide-number: true
    show-slide-number: all
    smaller: false
    chalkboard: true
    margin: 0.2
    width: 1150
    df-print: kable
editor: visual
---

# Introduction aux base de donn√©es et au langage SQL

## Plan du cours


## Une base de donn√©es, c'est quoi ?

\

::: columns
::: {.column width="50%"}

- Un ensemble de qui va permettre de structurer et de stocker des donn√©es :
  - des donn√©es
  - un syst√®me de gestion de base de donn√©es (SGBD)

:::
::: {.column width="50%"}

![](./img/database_intro.jpg) [^1]

:::
:::

[^1]: ["Original Database"](https://www.flickr.com/photos/8052628@N05/3835365695) by [shindoverse](https://www.flickr.com/photos/8052628@N05) is licensed under [CC BY-NC-SA 2.0](https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=openverse).

## Un SGBD ? ü§î

- Un logiciel qui permet de stocker, de manipuler et de r√©cup√©rer des donn√©es.
- Il existe plusieurs types de SGBD :
  - relationnels
  - NoSQL
  - objets
  - etc.
  
## Les logiciels de SGBD relationnels

::: columns
::: {.column width="50%"}
![](./img/postgresql.png){width="30%"}

![](./img/postgis.png){width="30%"}

\

![](./img/mysql.png){width="45%"}
:::

::: {.column width="50%"}
![](./img/sqlite.png){width="60%"}

![](./img/spatialite.png){width="40%"}

\
\

![](./img/oracle.png){width="45%"}
:::
:::

## Les bases de donn√©es relationnelles

- Les donn√©es sont stock√©es dans des tables
- Les tables sont reli√©es entre elles par des cl√©s

Objectifs :

- Eviter la redondance d'information
- Eviter les incoh√©rences
- Faciliter la mise √† jour des donn√©es
- Faciliter la recherche d'information

## Cl√©s primaires et cl√©s √©trang√®res

- Cl√© primaire : identifiant unique d'une ligne
- Cl√© √©trang√®re : identifiant d'une ligne d'une autre table

- Type de relation :
  - 1-1 : 1 ligne table 1 = 1 ligne table 2
  - 1-n : 1 ligne table 1 = n lignes table 2
  - n-n : n lignes table 1 = n lignes table 2

## Construisons une base de donn√©es

- Cours d'eau
- Bassins versants
- Stations de mesures
- Site de travaux
- Inventaire d'esp√®ces

## Mod√®le conceptuel de donn√©es (MCD)

![](./img/bd_cours_eau.webp)

## Le SQL (Structured Query Langage)

- Proche du langage naturel
- Le langage permettant d'int√©ragir avec une base de donn√©es
  - Langage de d√©finition des donn√©es (LDD) = cr√©ation d'une table
  - Langage de manipulation des donn√©es (LMD) = ajout, mise √† jour, suppression ou lecture de lignes
  - Langage de contr√¥le de donn√©es (LCD) = j'autorise Maurice √† consulter ces tables mais pas √† les modifier

## Principales instructions SQL {.smaller}

\

::: columns
::: {.column width="50%"}

- D√©finition
  - CREATE = cr√©ation d'une table
  - DROP = suppression d'une table
  - ALTER = modification d'une table
- Mise √† jour et lecture de ligne
  - INSERT = ajout
  - DELETE = suppression
  - UPDATE = mise √† jour
  - SELECT = consultation
  
:::
::: {.column width="50%"}

- Contr√¥le d'autorisation d'acc√®s
  - GRANT = affectaction de droits
  - REVOKE = suppression de droits
- Gestion de transaction
  - COMMIT = validation de modifications
  - ROLLBACK = annulation de modifications

:::
:::

## Les SELECT

```sql
SELECT nom, longueur --champs/colonnes
FROM cours_eau --table
WHERE longueur > 5; --conditions/filtres
```

\

En fran√ßais : **S√©lectionne** les champs *nom* et *longueur* **depuis** la table *cours_eau* **o√π** les valeurs du champ *longueur > 5*.

\

Exemple plus complet
```sql
SELECT colonne1, colonne2 --champs/colonnes
FROM table --table
WHERE colonne2 > x --conditions/filtres
GROUP BY colonne1 --aggr√©gation
HAVING count(colonne1) > y --filtre sur l'aggr√©gation
ORDER BY colonne1 ASC --tri
LIMIT 10; --limite le nombre de r√©sultats
```

## Les jointures

Permet de combiner les donn√©es de plusieurs tables en fonction de cl√©s communes.

- INNER JOIN : retourne les lignes lorsque qu'il y a au moins une correspondance dans les deux tables
- LEFT JOIN : retourne toutes les lignes de la table de gauche et les lignes correspondantes de la table de droite
- RIGHT JOIN : retourne toutes les lignes de la table de droite et les lignes correspondantes de la table de gauche
- FULL JOIN : retourne toutes les lignes lorsque qu'il y a une correspondance dans une des deux tables

## Exemple de jointure

```sql
SELECT cours_eau.nom, bassin_versant.nom
FROM cours_eau
INNER JOIN bassin_versant  --jointure avec la table bassin_versant
  ON cours_eau.id_bassin = bassin_versant.id; --cl√© de jointure
```

\

On s√©lectionne le nom du cours d'eau et le nom du bassin versant **depuis** la table *cours_eau* **en joignant** la table *bassin_versant* **sur** la cl√© *id_bassin* (cl√© √©trang√®re dans la table cours_eau).

## A vous de jouer !

rdv sur le site

